// generator client {
//   provider      = "prisma-client-js"
//   binaryTargets = ["native", "linux-musl-openssl-3.0.x"] // keep if deploying on Alpine/Linux
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or mysql/sqlite/etc., change as needed
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  displayName String
  teamId      String
  companyId   String?  @db.Uuid
  role        String

  team        Team     @relation(fields: [teamId], references: [id])
  company     Company? @relation(fields: [companyId], references: [id])
  profile     UserProfile?
  linkedAccounts LinkedAccount[]
  transactions Transaction[]
  alerts      Alert[]
  invitesSent Invite[] @relation("UserInvites")
}


model UserProfile {
  id            String   @id @default(uuid())
  userId        String   @unique
  timezone      String
  view          String
  sortBy        String
  sortOrder     String
  alerts_enabled Boolean

  user          User     @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model LinkedAccount {
  id       String  @id @default(uuid())
  userId   String
  provider String
  email    String
  linked   Boolean

  user     User    @relation(fields: [userId], references: [id])

  @@map("linked_accounts")
}

model Team {
  id           String   @id @default(uuid())
  name         String
  users        User[]
  folders      Folder[]
  customFields CustomField[]
  invites      Invite[]
  items        Item[] // ✅ make sure this exists
}

model Company {
  id       String   @id @default(uuid())
  name     String?
  country  String?
  color    String?

  users          User[]
  settings       CompanySetting?
  addresses      Address[]
  subscriptions  Subscription[]

  @@map("companies")
}

model CompanySetting {
  id            String  @id @default(uuid())
  companyId     String  @unique
  dateFormat    String
  currency      String
  priceDecimals Int
  timeFormat    String
  timezone      String
  keepZeroQty   Boolean

  company       Company @relation(fields: [companyId], references: [id])

  @@map("company_settings")
}

model Address {
  id         String   @id @default(uuid())
  companyId  String
  name       String
  address1   String
  city       String
  country    String
  type       String
  isDefault  Boolean

  company    Company  @relation(fields: [companyId], references: [id])

  @@map("addresses")
}

model Plan {
  id     String  @id @default(uuid())
  name   String
  price  Float

  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id                   String   @id @default(uuid())
  companyId            String
  planId               String
  currentEntries       Int
  currentUsers         Int
  currentCustomFields  Int
  createdAt            DateTime @default(now())

  company              Company  @relation(fields: [companyId], references: [id])
  plan                 Plan     @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  parentId  String?
  teamId    String

  parent    Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  children  Folder[] @relation("FolderToFolder")
  team      Team     @relation(fields: [teamId], references: [id])
  items     Item[]
  transactions Transaction[]

  @@map("folders")
}

model Item {
  id        String   @id @default(uuid())
  name      String
  sku       String
  quantity  Int
  min_level Int
  price     Float
  notes     String
  barcode1  String
  barcode2  String
  folderId  String
  teamId    String
  createdAt DateTime @default(now())

  folder    Folder   @relation(fields: [folderId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id]) // ✅ corrected

  photos       ItemPhoto[]
  tags         ItemTag[]
  transactions Transaction[]
  customValues CustomValue[]
  alerts       Alert[]

  @@map("items")
}

model ItemPhoto {
  id       String  @id @default(uuid())
  itemId   String
  file_url String

  item     Item    @relation(fields: [itemId], references: [id])

  @@map("item_photos")
}

model ItemTag {
  id     String  @id @default(uuid())
  itemId String
  tag    String

  item   Item    @relation(fields: [itemId], references: [id])

  @@map("item_tags")
}

model Transaction {
  id               String   @id @default(uuid())
  itemId           String
  folderId         String
  userId           String
  action           String
  entity_type      String
  quantity_changed Int
  timestamp        DateTime @default(now())

  item             Item     @relation(fields: [itemId], references: [id])
  folder           Folder   @relation(fields: [folderId], references: [id])
  user             User     @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model CustomField {
  id        String   @id @default(uuid())
  name      String
  field_type String
  teamId    String

  team      Team     @relation(fields: [teamId], references: [id])
  values    CustomValue[]

  @@map("custom_fields")
}

model CustomValue {
  id       String  @id @default(uuid())
  itemId   String
  fieldId  String
  value    String

  item     Item    @relation(fields: [itemId], references: [id])
  field    CustomField @relation(fields: [fieldId], references: [id])

  @@map("custom_values")
}

model Alert {
  id         String  @id @default(uuid())
  itemId     String
  userId     String
  type       String
  threshold  Int
  triggered  Boolean

  item       Item    @relation(fields: [itemId], references: [id])
  user       User    @relation(fields: [userId], references: [id])

  @@map("alerts")
}

model Invite {
  id        String   @id @default(uuid())
  inviterId String
  email     String
  teamId    String
  role      String
  status    String
  sentAt    DateTime @default(now())

  inviter   User     @relation("UserInvites", fields: [inviterId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
}

